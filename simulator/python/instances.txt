Trénink 1
Trening 1
40
{text:" vrátí dvojnásobek čísla n",function:{name:"double", paramNames:["n"], paramTypes:["int 0 10"]}, solution:"    return 2*n", attempt:"    n = n + 5\n    return n"}

Trénink podmínky
Trening conditions
50
{text:" pokud je přirozené čislo n alespoň dvojciferné, vrátí cifru na místě desítek čísla n, jinak vrátí ciferný součet čísla n",function:{name:"foo", paramNames:["n"], paramTypes:["int 0 200"]}, solution:"    if n > 9:\n        return n %100 // 10\n    else:\n        return n", attempt:"    if n > 100:\n        return n // 5\n    else:\n        return n % 5"}

Trénink cykly 
Trening loops
50
{text:" vypíše tři posloupnosti. První budou přirozená čísla od 1 do n. Druhá budou přirozená čísla od n do 1. Třetí bude Aritmetické posloupnost od 1 do 100 s krokem n.",function:{name:"loops", paramNames:["n"], paramTypes:["int 0 200"]}, solution:"    print range(1, n+1)\n    print range(n, 0, -1)\n    print range(1, 101, n)", attempt:"    print range(1, 10)\n    \n    l = []\n    for i in range(0, 10):\n        l.append(i+n)\n    print l\n    \n    print range(100, 0, -10)"}

Trénink řetězce
Trening strings
50
{text:" vrátí řetězec str s prohozeným prvním a posledním znakem",function:{name:"swap", paramNames:["str"], paramTypes:["str 0 10"], testParams:[['abcdefg']]}, solution:"    if len(str) < 2: \n        return str\n    else: \n        return str[-1] + str[1:-1] + str[0]", attempt:"    return (' index: '+ str[2] +\n        '\\n substring: '+ str[1:3] +\n        '\\n indexFromEnd: '+ str[-2])"}

Sudá Posloupnost
Even Sequence
120
{text:" vrátí seznam všech sudých čísel od 0 do n.",function:{name:"odds", paramNames:["n"], paramTypes:["int 0 20"]}, solution:"    l = []\n    for i in range((n+1)/2):\n        l.append(i*2)\n    return l", attempt:"    l = []\n    for i in range(n):\n        l.append(i)\n    return l"}

NSD
GCD
130
{text:" vrátí největšího společného dělitele čisel a, b",function:{name:"gcd", paramNames:["a","b"], paramTypes:["int 1 50","int 1 50"]}, solution:"    for i in range(min(a,b), 0, -1):\n        if b % i == 0 and a % i == 0:\n            return i"}

Posloupnost 1
Sequence 1
155
{text:" vrátí seznam obsahující stejnou posloupnost jako Požedovaný výstup.",function:{name:"sequence1", paramNames:["n"], paramTypes:["int 0 20"]}, solution:"    l = []\n    if n > 0:\n        l.append(1)\n    for i in range(n-1):\n        l.append(l[i]*(i+2))\n    return l"}

Posloupnost 1.5
Sequence 1.5
155
{text:" vrátí seznam obsahující stejnou posloupnost jako Požedovaný výstup.",function:{name:"sequence1", paramNames:["n"], paramTypes:["int 0 20"]}, solution:"    l = []\n    if n > 0:\n        l.append(1)\n    for i in range(n-1):\n        l.append(l[i]+(i+1))\n    return l"}

Posloupnost 2
Sequence 2
165
{text:" vrátí seznam obsahující stejnou posloupnost jako Požedovaný výstup.",function:{name:"sequence2", paramNames:["n"], paramTypes:["int 0 20"]}, solution:"    l = []\n    for i in range(1,n+5):\n        for j in range(1,i):\n            if len(l) >= n:\n                return l\n            l.append(j)"}

Posloupnost 3
Sequence 3
185
{text:" vrátí seznam obsahující stejnou posloupnost jako Požedovaný výstup.",function:{name:"sequence3", paramNames:["n"], paramTypes:["int 0 20"]}, solution:"    l = []\n    i = 2\n    while len(l) < n:\n        if isprime(i):\n            l.append(i)\n        i += 1\n    return l\ndef isprime(n):\n    if n == 2: \n        return True    \n    # all other even numbers are not primes\n    if not n & 1: \n        return False\n    # range starts with 3 and only needs to go up the squareroot of n\n    # for all odd numbers\n    for x in range(3, int(n**0.5)+1, 2):\n        if n % x == 0:\n            return False\n    return True"}

Posloupnost 4
Sequence 4
225
{text:" vrátí seznam obsahující stejnou posloupnost jako Požedovaný výstup.",function:{name:"sequence4", paramNames:["n"], paramTypes:["int 0 20"]}, solution:"    l = []\n    if n > 0:\n        l.append(1)\n    for i in range(n-1):\n        l.append(l[i] + divisors(l[i]))\n    return l\ndef divisors(n):\n    sum = 0\n    for i in range(1,n+1):\n        if n//i == n/i:\n            sum += 1\n    return sum"}

Posloupnost 5
Sequence 5
255
{text:" vrátí seznam obsahující stejnou posloupnost jako Požedovaný výstup.",function:{name:"sequence5", paramNames:["n"], paramTypes:["int 0 20"]}, solution:"    l = []\n    if n > 0:\n        l.append(1)\n    if n > 1:\n        l.append(2)\n    if n > 2:\n        l.append(2)\n    i = 3\n    while len(l) < n:\n        for j in range(l[i-1]):\n            l.append(i)\n            if len(l) >= n:\n                break\n        i += 1\n    return l"}

Součet 
Sum
160
{text:" sečte všechna čísla od 1 do n a vrátí výsledek.",function:{name:"sum", paramNames:["n"], paramTypes:["int 1 20"]}, solution:"    sum = 0\n    for i in range(n+1):\n        sum += i\n    return sum"}

Faktoriál 
Factorial
180
{text:" vynásobí všechna čísla od 1 do n a vrátí výsledek.",function:{name:"fact", paramNames:["n"], paramTypes:["int 1 20"]}, solution:"    fact = 1\n    for i in range(1,n+1):\n        fact *= i\n    return fact"}

Odmocnina 
Squareroot
190
{text:" vrátí celou část odmocniny z čísla n, tj. největší celé x takové, že x^2 <= n.",function:{name:"sqrt", paramNames:["n"], paramTypes:["int 1 1000"]}, solution:"    import math\n    return math.floor(math.sqrt(n))"}

Ciferný součet 
Digit sum
190
{text:" vrátí ciferný součet čísla n",function:{name:"dsum", paramNames:["n"], paramTypes:["int 10000 10000000"]}, solution:"    sum = 0\n    l = list(str(n))\n    for i in range(len(l)):\n        sum += int(l[i])\n    return sum"}

Počet jedniček
Amount of ones
220
{text:" vrátí počet jedniček v čísle n",function:{name:"sum1", paramNames:["n"], paramTypes:["intt 10000 10000000"]}, solution:"    sum = 0\n    l = list(str(n))\n    for i in range(len(l)):\n        if int(l[i]) == 1:\n            sum += int(l[i])\n    return sum"}

Pozpátku 
Reverse
260
{text:" vypíše číslo n zapsané pozpátku.",function:{name:"reverse", paramNames:["n"], paramTypes:["intt 10000 10000000"]}, solution:"    print str(n)[::-1]"}

Kosočtverec
Diamant
320
{text:" vypíše kosočtverec ze znaků '#'. Parametr n určuje velikost (pro podrobnosti viz Požadovaný výstup)",function:{name:"diamant", paramNames:["n"], paramTypes:["int 1 10"]}, solution:"    for i in range(n):\n        print ' '*(n-i-1),'#'*(2*i-1)\n    for i in range(2,n):\n        print ' '*(i-1),'#'*(2*(n-i)-1)"}

Kruh
Circle
280
{text:" vypíše kruh ze znaků '#' o poloměru n (viz Požadovaný výstup)",function:{name:"circle", paramNames:["n"], paramTypes:["int 8 20"]}, solution:"    for i in range(-n, n+1):\n        line = ''\n        for j in range(-n, n+1):\n            if i*i + j*j <= n*n:\n                line += '#'\n            else:\n                line += '.'\n        print line"}

Šachovnice
Chessboard
360
{text:" vypíše šachovnici 8x8 s políčky o velikosti n (viz Požadovaný výstup)",function:{name:"chessboard", paramNames:["n"], paramTypes:["int 1 6"]}, solution:"    for i in range(n*8):\n        line = ''\n        for j in range(n*8):\n            if max(i% (2*n), j% (2*n)) < n or min(i% (2*n), j% (2*n)) >= n:\n                line += '#'\n            else:\n                line += '.'\n        print line"}

Čtverce
Squares
360
{text:" vypíše vnořené čtverce, z nichž největší má hranu o velikosti n (viz Požadovaný výstup)",function:{name:"squares", paramNames:["n"], paramTypes:["int 1 30"]}, solution:"    for i in range(n):\n        line = ''\n        for j in range(n):\n            if ((i+j < n and((i % 2 == 0 and i <= j) or (j % 2 == 0 and j <= i))) \n                    or ((((n-i) % 2 == 1 and i >= j) or ((n-j) % 2 == 1 and j >= i)) and i+j >= n)):\n                line += '#'\n            else:\n                line += ' '\n        print line"}

Spirála
Spiral
360
{text:" vypíše spirálu s nejdelšími hranami o velikosti n (viz Požadovaný výstup)",function:{name:"spiral", paramNames:["n"], paramTypes:["int 1 30"]}, solution:"    for i in range(n):\n        line = ''\n        for j in range(n):\n            if ((i+j < n-2 and((i % 2 == 0 and i <= j) or (j % 2 == 0 and j <= i))) \n                    or ((((n-i) % 2 == 1 and i >= j) or ((n-j) % 2 == 1 and j >= i)) and i+j > n-2)\n                    or (i % 2 == 1 and i+j == n-2 and i< n/2)\n                    or ((n-i) % 2 == 0 and i+j == n-2 and i> n/2)):\n                line += '#'\n            else:\n                line += ' '\n        print line"}

Palindrom
Palindrom
260
{text:" vrací True pokud je řetězec str palindrom (tj. čte se od předu i od zadu stejně)",function:{name:"palindrom", paramNames:["str"], paramTypes:["str 1 8"], testParams:[['lol', 'kajak', 'jelenovipivonelej', 'l']]}, solution:"    return str == str[::-1]"}

Šifra 1
Cypher 1
360
{text:" vrací řetězec str zašifrovaný. Použitou transpoziční šifru musíte nejdříve odhalit z Požedovaného výstupu :-P",function:{name:"cypher1", paramNames:["str"], paramTypes:["str 8 18"], testParams:[['heslojeprase']]}, solution:"    l = len(str)\n    l3 = (l-l%3)/3\n    if l3 != l/3:\n        l3 += 1\n    ret = ''\n    for i in range(l3):\n        ret += str[l3 * 0 +i]\n        if l3 * 1 +i < l:\n            ret += str[l3 * 1 +i]\n        if l3 * 2 +i < l:\n            ret += str[l3 * 2 +i]\n    return ret",attempt: "    length = len(str)\n    ret = ''\n    for i in range(length):\n         ret += str[i]\n    return ret"}

Šifra 2
Cypher 2
380
{text:" vrací řetězec str zašifrovaný. Použitou  transpoziční šifru musíte nejdříve odhalit z Požedovaného výstupu :-P",function:{name:"cypher2", paramNames:["str"], paramTypes:["str 8 18"], testParams:[['heslojeprase']]}, solution:"    length = len(str)\n    ret = ''\n    for i in range(length/2):\n         ret += str[i*2]\n    for i in range(length/2):\n        if length - i*2 - (length+1)%2 < length:\n            ret += str[length - i*2 - (length+1)%2]\n    return ret"}

Šifra 3
Cypher 3
430
{text:" vrací řetězec str zašifrovaný. Použitou transpoziční šifru musíte nejdříve odhalit z Požedovaného výstupu :-P",function:{name:"cypher3", paramNames:["str", "n"], paramTypes:["str 8 18", "int 2 6"], testParams:[['heslojeprase'],[3]]}, solution:"    l = len(str)\n    ret = ''\n    for i in range(l-l%n+n):\n        if (i-i%n)+ n-1 - i%n < l:\n            ret += str[(i-i%n)+ n-1 - i%n]\n    return ret"}



{text:"",function:{name:"", paramNames:["n"], paramTypes:["int"]}, solution:""}
